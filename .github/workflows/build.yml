name: Android APK Build

# 触发条件：推送到master分支或手动触发
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取代码仓库
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 配置Java环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle

      # 3. 授予Gradle执行权限
      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      # 4. 构建Release版本APK
      - name: Build Release APK
        run: ./gradlew assembleRelease --no-daemon

      # 5. 签名APK（可选但推荐）
      - name: Sign APK
        if: success()
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      # 6. 重命名签名后的APK
      - name: Rename APK
        if: success()
        run: |
          mv ${{ steps.sign_app.outputs.signedReleaseFile }} app-release-signed.apk
          echo "APK_FILE_PATH=app-release-signed.apk" >> $GITHUB_ENV

      # 7. 上传APK作为构建产物
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: ${{ env.APK_FILE_PATH }}

      # 8. 创建GitHub Release并附加APK（当推送标签时）
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.APK_FILE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
